"use strict";
var $__13 = $traceurRuntime.initGeneratorFunction(pieces),
    $__14 = $traceurRuntime.initGeneratorFunction(candidates);
Object.defineProperties(exports, {
  Algebraic: {get: function() {
      return Algebraic;
    }},
  chunker: {get: function() {
      return chunker;
    }},
  parse: {get: function() {
      return parse;
    }},
  stringify: {get: function() {
      return stringify;
    }},
  __esModule: {value: true}
});
var $__0 = require('./brands'),
    WHITE = $__0.WHITE,
    KING = $__0.KING,
    QUEEN = $__0.QUEEN,
    ROOK = $__0.ROOK,
    BISHOP = $__0.BISHOP,
    KNIGHT = $__0.KNIGHT,
    PAWN = $__0.PAWN;
var Point = require('./point').Point;
var $__2 = require('./standard'),
    King = $__2.King,
    Queen = $__2.Queen,
    Rook = $__2.Rook,
    Bishop = $__2.Bishop,
    Knight = $__2.Knight,
    Pawn = $__2.Pawn;
var EnPassantTarget = require('./eptarget').EnPassantTarget;
var $__4 = require('./error'),
    ChessError = $__4.ChessError,
    AmbiguityError = $__4.AmbiguityError,
    MobilityError = $__4.MobilityError;
var $__5 = require('./util'),
    squareCoords = $__5.squareCoords,
    rankIndex = $__5.rankIndex,
    fileIndex = $__5.fileIndex,
    rankName = $__5.rankName,
    fileName = $__5.fileName,
    squareName = $__5.squareName;
var unique = require('lodash.uniq');
var Algebraic = {
  parse: parse,
  stringify: stringify,
  get chunker() {
    return chunker;
  }
};
var chunker = /([KQRBN])?([a-h]?[1-8]?)?x?([a-h][1-8])(?:=([QRBN]))?/;
function parse(algStr, position) {
  if (algStr === 'O-O' || algStr === 'O-O-O') {
    return castlingMove(algStr, position);
  }
  return normalMove(algStr, position);
}
function stringify($__8, position) {
  var $__10,
      $__11,
      $__12;
  var $__9 = $traceurRuntime.assertObject($__8),
      piece = $__9.piece,
      target = $__9.target,
      source = ($__10 = $__9.source) === void 0 ? position.pieceCoords(piece) : $__10,
      isCapture = ($__11 = $__9.isCapture) === void 0 ? position.pieceByCoords(target) != null : $__11,
      promotionPrize = ($__12 = $__9.promotionPrize) === void 0 ? null : $__12;
  var disambiguator = [];
  for (var $__6 = pieces(position, null, target, stringifyPiece(piece))[$traceurRuntime.toProperty(Symbol.iterator)](),
      $__7; !($__7 = $__6.next()).done; ) {
    var p = $__7.value;
    {
      if (p === piece) {
        continue;
      }
      if (position.pieceCoords(p).y === source.y) {
        disambiguator.push(rankName(source.y));
      } else {
        disambiguator.push(fileName(source.x));
      }
    }
  }
  return $traceurRuntime.spread([stringifyPiece(piece)], unique(disambiguator), [isCapture ? 'x' : '', squareName(target)]).join('');
}
function pieces(position, source, target) {
  var i,
      Brand,
      $__6,
      $__7,
      p;
  var $arguments = arguments;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          i = $arguments[3] !== (void 0) ? $arguments[3] : '';
          Brand = pieceBrand(i);
          $ctx.state = 15;
          break;
        case 15:
          $ctx.state = (Brand === King) ? 1 : 12;
          break;
        case 1:
          $ctx.state = 2;
          return getKing(position);
        case 2:
          $ctx.maybeThrow();
          $ctx.state = -2;
          break;
        case 12:
          $__6 = candidates(position, Brand.brand, source, target)[$traceurRuntime.toProperty(Symbol.iterator)]();
          $ctx.state = 8;
          break;
        case 8:
          $ctx.state = (!($__7 = $__6.next()).done) ? 9 : -2;
          break;
        case 9:
          p = $__7.value;
          $ctx.state = 10;
          break;
        case 10:
          $ctx.state = 6;
          return p;
        case 6:
          $ctx.maybeThrow();
          $ctx.state = 8;
          break;
        default:
          return $ctx.end();
      }
  }, $__13, this);
}
function candidates(position, brand, source, target) {
  var $__6,
      $__7,
      p,
      e,
      loc;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          $__6 = position.pieces({
            brand: brand,
            color: position.activeColor
          })[$traceurRuntime.toProperty(Symbol.iterator)]();
          $ctx.state = 29;
          break;
        case 29:
          $ctx.state = (!($__7 = $__6.next()).done) ? 31 : -2;
          break;
        case 31:
          p = $__7.value;
          $ctx.state = 32;
          break;
        case 32:
          $ctx.pushTry(22, null);
          $ctx.state = 25;
          break;
        case 25:
          throw undefined;
          $ctx.state = 27;
          break;
        case 27:
          $ctx.popTry();
          $ctx.state = 29;
          break;
        case 22:
          $ctx.popTry();
          loc = $ctx.storedException;
          $ctx.state = 20;
          break;
        case 20:
          loc = position.pieceCoords(p);
          $ctx.state = 21;
          break;
        case 21:
          $ctx.state = (source == null || source.x === loc.x || source.y === loc.y) ? 14 : 29;
          break;
        case 14:
          $ctx.pushTry(12, null);
          $ctx.state = 15;
          break;
        case 15:
          position.movePiece(p, target);
          $ctx.state = 6;
          break;
        case 6:
          $ctx.state = 2;
          return p;
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        case 4:
          $ctx.popTry();
          $ctx.state = 29;
          break;
        case 12:
          $ctx.popTry();
          e = $ctx.storedException;
          $ctx.state = 9;
          break;
        case 9:
          $ctx.state = (e instanceof ChessError) ? 29 : 8;
          break;
        case 8:
          throw e;
          $ctx.state = 29;
          break;
        default:
          return $ctx.end();
      }
  }, $__14, this);
}
function pieceBrand(i) {
  switch (i) {
    case 'K':
      return King;
    case 'Q':
      return Queen;
    case 'R':
      return Rook;
    case 'B':
      return Bishop;
    case 'N':
      return Knight;
    case '':
      return Pawn;
  }
}
function parsePromotionPrize(i, color) {
  switch (i) {
    case 'Q':
      return new Queen({color: color});
    case 'R':
      return new Rook({color: color});
    case 'B':
      return new Bishop({color: color});
    case 'N':
      return new Knight({color: color});
  }
}
function parseSource(s) {
  if (s == null) {
    return null;
  }
  if (!isNaN(Number(s))) {
    return new Point(NaN, rankIndex(s));
  }
  return new Point(fileIndex(s), NaN);
}
function normalMove(algStr, position) {
  var $__8 = $traceurRuntime.assertObject(chunker.exec(algStr)),
      _ = $__8[0],
      i = $__8[1],
      s = $__8[2],
      t = $__8[3],
      p = $__8[4];
  var source = parseSource(s);
  var target = squareCoords(t);
  var promotionPrize = parsePromotionPrize(p, position.activeColor);
  var $__8 = $traceurRuntime.spread(pieces(position, source, target, i)),
      piece = $__8[0],
      extra = $__8[1];
  if (piece == null) {
    throw new MobilityError(algStr, position);
  }
  if (extra != null) {
    throw new AmbiguityError(algStr);
  }
  var $__8 = $traceurRuntime.assertObject(EnPassantTarget.capturablePiece(position, piece, target)),
      captureTarget = $__8.captureTarget,
      capturePiece = $__8.capturePiece,
      isEnPassant = $__8.isEnPassant;
  return {
    piece: piece,
    source: position.pieceCoords(piece),
    target: target,
    isCapture: capturePiece != null,
    captureTarget: captureTarget,
    capturePiece: capturePiece,
    isEnPassant: isEnPassant,
    promotionPrize: promotionPrize
  };
}
function castlingMove(algStr, position) {
  var king = position.piece({
    brand: KING,
    color: position.activeColor
  });
  return {
    piece: king,
    source: position.pieceCoords(king),
    target: getCastlingCoords(algStr, position),
    isCapture: false,
    capturePiece: null,
    isEnPassant: false,
    promotionPrize: null
  };
}
function getCastlingCoords(algStr, position) {
  switch (algStr) {
    case 'O-O':
      return squareCoords(position.activeColor === WHITE ? 'g1' : 'g8');
    case 'O-O-O':
      return squareCoords(position.activeColor === WHITE ? 'c1' : 'c8');
  }
}
function getKing(position) {
  return position.piece({
    brand: King.brand,
    color: position.activeColor
  });
}
function stringifyPiece(piece) {
  switch (piece.brand) {
    case KING:
      return 'K';
    case QUEEN:
      return 'Q';
    case ROOK:
      return 'R';
    case BISHOP:
      return 'B';
    case KNIGHT:
      return 'N';
    case PAWN:
      return '';
  }
}
