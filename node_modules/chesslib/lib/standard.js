"use strict";
Object.defineProperties(exports, {
  Pawn: {get: function() {
      return $__pawn__.Pawn;
    }},
  King: {get: function() {
      return King;
    }},
  Queen: {get: function() {
      return Queen;
    }},
  Rook: {get: function() {
      return Rook;
    }},
  Bishop: {get: function() {
      return Bishop;
    }},
  Knight: {get: function() {
      return Knight;
    }},
  __esModule: {value: true}
});
var $__0 = require('./brands'),
    KING = $__0.KING,
    QUEEN = $__0.QUEEN,
    KNIGHT = $__0.KNIGHT,
    BISHOP = $__0.BISHOP,
    ROOK = $__0.ROOK;
var Piece = require('./piece').Piece;
var Leaper = require('./leaper').Leaper;
var Rider = require('./rider').Rider;
var Royal = require('./royal').Royal;
var $__pawn__ = require('./pawn');
var King = function King(options) {
  $traceurRuntime.superCall(this, $King.prototype, "constructor", [options]);
  Royal.call(this);
};
var $King = King;
($traceurRuntime.createClass)(King, {
  canCapture: function(position, from, to) {
    for (var $__6 = [this.mobility[0], this.mobility[1]][$traceurRuntime.toProperty(Symbol.iterator)](),
        $__7; !($__7 = $__6.next()).done; ) {
      var m = $__7.value;
      {
        try {
          throw undefined;
        } catch (success) {
          {
            success = m.test(position, from, to);
            if (success) {
              return true;
            }
          }
        }
      }
    }
    return false;
  },
  get fenEncoding() {
    return this.isWhite ? 'K' : 'k';
  }
}, {get brand() {
    return KING;
  }}, Piece);
var Queen = function Queen(options) {
  $traceurRuntime.superCall(this, $Queen.prototype, "constructor", [options]);
  Rider.call(this, 1, 0);
  Rider.call(this, 1, 1);
};
var $Queen = Queen;
($traceurRuntime.createClass)(Queen, {get fenEncoding() {
    return this.isWhite ? 'Q' : 'q';
  }}, {get brand() {
    return QUEEN;
  }}, Piece);
var Rook = function Rook(options) {
  $traceurRuntime.superCall(this, $Rook.prototype, "constructor", [options]);
  Rider.call(this, 1, 0);
};
var $Rook = Rook;
($traceurRuntime.createClass)(Rook, {get fenEncoding() {
    return this.isWhite ? 'R' : 'r';
  }}, {get brand() {
    return ROOK;
  }}, Piece);
var Bishop = function Bishop(options) {
  $traceurRuntime.superCall(this, $Bishop.prototype, "constructor", [options]);
  Rider.call(this, 1, 1);
};
var $Bishop = Bishop;
($traceurRuntime.createClass)(Bishop, {get fenEncoding() {
    return this.isWhite ? 'B' : 'b';
  }}, {get brand() {
    return BISHOP;
  }}, Piece);
var Knight = function Knight(options) {
  $traceurRuntime.superCall(this, $Knight.prototype, "constructor", [options]);
  Leaper.call(this, 1, 2);
};
var $Knight = Knight;
($traceurRuntime.createClass)(Knight, {get fenEncoding() {
    return this.isWhite ? 'N' : 'n';
  }}, {get brand() {
    return KNIGHT;
  }}, Piece);
