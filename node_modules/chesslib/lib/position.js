"use strict";
Object.defineProperties(exports, {
  Position: {get: function() {
      return Position;
    }},
  __esModule: {value: true}
});
var $__0 = require('./brands'),
    WHITE = $__0.WHITE,
    BLACK = $__0.BLACK,
    KING = $__0.KING,
    PAWN = $__0.PAWN,
    LIGHT = $__0.LIGHT,
    DARK = $__0.DARK;
var Board = require('./board').Board;
var Mobility = require('./mobility').Mobility;
var Castling = require('./castling').Castling;
var EnPassantTarget = require('./eptarget').EnPassantTarget;
var Point = require('./point').Point;
var Promotion = require('./promotion').Promotion;
var Algebraic = require('./algebraic').Algebraic;
var HalfmoveClock = require('./halfmoveclock').HalfmoveClock;
var $__9 = require('./util'),
    entries = $__9.entries,
    identity = $__9.identity,
    squareName = $__9.squareName,
    squareCoords = $__9.squareCoords,
    oppositeColor = $__9.oppositeColor,
    bounded = $__9.bounded;
var $__10 = require('./error'),
    ChessError = $__10.ChessError,
    MobilityError = $__10.MobilityError,
    CheckError = $__10.CheckError,
    PromotionError = $__10.PromotionError;
var assign = require('lodash.assign');
var Position = function Position() {
  var $__18,
      $__19,
      $__20,
      $__21,
      $__22,
      $__23,
      $__24,
      $__25;
  var $__17 = $traceurRuntime.assertObject(arguments[0] !== (void 0) ? arguments[0] : {}),
      ranks = ($__18 = $__17.ranks) === void 0 ? 8 : $__18,
      files = ($__19 = $__17.files) === void 0 ? 8 : $__19,
      activeColor = ($__20 = $__17.activeColor) === void 0 ? WHITE : $__20,
      castling = ($__21 = $__17.castling) === void 0 ? null : $__21,
      enPassantTarget = ($__22 = $__17.enPassantTarget) === void 0 ? null : $__22,
      halfmoveClock = ($__23 = $__17.halfmoveClock) === void 0 ? null : $__23,
      fullmoveCounter = ($__24 = $__17.fullmoveCounter) === void 0 ? 0 : $__24,
      board = ($__25 = $__17.board) === void 0 ? new Board(ranks, files) : $__25;
  this.board = board;
  this.activeColor = activeColor;
  this.castling = castling;
  this.enPassantTarget = enPassantTarget;
  this.halfmoveClock = halfmoveClock;
  this.fullmoveCounter = fullmoveCounter;
  this.promotionSquare = Promotion.square(this);
};
var $Position = Position;
($traceurRuntime.createClass)(Position, {
  beget: function(overrides) {
    return new $Position(assign({}, this, overrides));
  },
  get files() {
    return this.board.files;
  },
  get ranks() {
    return this.board.ranks;
  },
  material: function(brand) {
    return this.board.getPieces(brand);
  },
  pieceBySquare: function(squareName) {
    return this.pieceByCoords(squareCoords(squareName));
  },
  pieceCoords: function(piece) {
    return this.board.getPieceCoords(piece);
  },
  pieceByCoords: function(point) {
    var rotated = arguments[1] !== (void 0) ? arguments[1] : false;
    return this.board.getPieceByCoords(point, rotated);
  },
  pieces: $traceurRuntime.initGeneratorFunction(function $__26() {
    var selector,
        $__15,
        $__16,
        piece,
        $__13,
        $__14,
        $__18,
        val,
        key;
    var $arguments = arguments;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            selector = $arguments[0] !== (void 0) ? $arguments[0] : {};
            $ctx.state = 20;
            break;
          case 20:
            $__15 = this.material(selector.brand)[$traceurRuntime.toProperty(Symbol.iterator)]();
            $ctx.state = 2;
            break;
          case 2:
            $ctx.state = (!($__16 = $__15.next()).done) ? 15 : -2;
            break;
          case 15:
            piece = $__16.value;
            $ctx.state = 16;
            break;
          case 16:
            $__13 = entries(selector)[$traceurRuntime.toProperty(Symbol.iterator)]();
            $ctx.state = 5;
            break;
          case 5:
            $ctx.state = (!($__14 = $__13.next()).done) ? 7 : 9;
            break;
          case 7:
            $__18 = $traceurRuntime.assertObject($__14.value), val = $__18[0], key = $__18[1];
            $ctx.state = 8;
            break;
          case 8:
            $ctx.state = (piece[$traceurRuntime.toProperty(key)] !== val) ? 2 : 5;
            break;
          case 9:
            $ctx.state = 12;
            return piece;
          case 12:
            $ctx.maybeThrow();
            $ctx.state = 2;
            break;
          default:
            return $ctx.end();
        }
    }, $__26, this);
  }),
  piece: function(selector) {
    for (var $__13 = this.pieces(selector)[$traceurRuntime.toProperty(Symbol.iterator)](),
        $__14; !($__14 = $__13.next()).done; ) {
      var i = $__14.value;
      {
        return i;
      }
    }
    return null;
  },
  all: function(selector) {
    return $traceurRuntime.spread(this.pieces(selector));
  },
  checks: $traceurRuntime.initGeneratorFunction(function $__27() {
    var color,
        loc,
        $__13,
        $__14,
        enemy;
    var $arguments = arguments;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            color = $arguments[0] !== (void 0) ? $arguments[0] : this.activeColor;
            loc = $arguments[1] !== (void 0) ? $arguments[1] : this.pieceCoords(this.piece({
              brand: KING,
              color: color
            }));
            $ctx.state = 11;
            break;
          case 11:
            $__13 = this.pieces({color: oppositeColor(color)})[$traceurRuntime.toProperty(Symbol.iterator)]();
            $ctx.state = 4;
            break;
          case 4:
            $ctx.state = (!($__14 = $__13.next()).done) ? 6 : -2;
            break;
          case 6:
            enemy = $__14.value;
            $ctx.state = 7;
            break;
          case 7:
            $ctx.state = (enemy.canCapture(this, this.pieceCoords(enemy), loc)) ? 1 : 4;
            break;
          case 1:
            $ctx.state = 2;
            return enemy;
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          default:
            return $ctx.end();
        }
    }, $__27, this);
  }),
  moves: $traceurRuntime.initGeneratorFunction(function $__28() {
    var color,
        $__15,
        $__16,
        piece,
        $__13,
        $__14,
        move;
    var $arguments = arguments;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            color = $arguments[0] !== (void 0) ? $arguments[0] : this.activeColor;
            $ctx.state = 14;
            break;
          case 14:
            $__15 = this.pieces({color: color})[$traceurRuntime.toProperty(Symbol.iterator)]();
            $ctx.state = 7;
            break;
          case 7:
            $ctx.state = (!($__16 = $__15.next()).done) ? 9 : -2;
            break;
          case 9:
            piece = $__16.value;
            $ctx.state = 10;
            break;
          case 10:
            $__13 = bounded(this.board, piece.moves(this))[$traceurRuntime.toProperty(Symbol.iterator)]();
            $ctx.state = 4;
            break;
          case 4:
            $ctx.state = (!($__14 = $__13.next()).done) ? 5 : 7;
            break;
          case 5:
            move = $__14.value;
            $ctx.state = 6;
            break;
          case 6:
            $ctx.state = 2;
            return {
              piece: piece,
              move: move
            };
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          default:
            return $ctx.end();
        }
    }, $__28, this);
  }),
  isCheck: function(color, loc) {
    for (var $__13 = this.checks(color, loc)[$traceurRuntime.toProperty(Symbol.iterator)](),
        $__14; !($__14 = $__13.next()).done; ) {
      var _ = $__14.value;
      {
        return true;
      }
    }
    return false;
  },
  isCheckmate: function() {
    var color = this.activeColor;
    if (!this.isCheck(color)) {
      return false;
    }
    for (var $__13 = this.moves()[$traceurRuntime.toProperty(Symbol.iterator)](),
        $__14; !($__14 = $__13.next()).done; ) {
      try {
        throw undefined;
      } catch (move) {
        try {
          throw undefined;
        } catch (piece) {
          try {
            throw undefined;
          } catch ($__18) {
            {
              {
                $__18 = $traceurRuntime.assertObject($__14.value);
                piece = $__18.piece;
                move = $__18.move;
              }
              {
                try {
                  if (!this.movePiece(piece, move).isCheck(color)) {
                    return false;
                  }
                } catch (err) {
                  if (err instanceof ChessError) {
                    continue;
                  }
                  throw err;
                }
              }
            }
          }
        }
      }
    }
    return true;
  },
  is50MoveDraw: function() {
    return this.halfmoveClock.count >= 50 * 2;
  },
  isCheckmatePossible: function() {
    var pieces = this.all();
    var kings = pieces.filter((function(piece) {
      return piece.brand === KING;
    }));
    var nonKings = pieces.filter((function(piece) {
      return piece.brand !== KING;
    }));
    if ((kings.length !== 2) || (pieces.length === 2) || (pieces.length === 3 && nonKings[0].brand === KNIGHT) || (nonKings.every((function($__18) {
      var brand = $traceurRuntime.assertObject($__18).brand;
      return brand === BISHOP;
    })) && (nonKings.every((function(piece) {
      return squareColor(position.pieceCoords(piece)) === LIGHT;
    })) || nonKings.every((function(piece) {
      return squareColor(position.pieceCoords(piece)) === DARK;
    }))))) {
      return false;
    }
    return true;
  },
  tryMovePiece: function(piece, target) {
    try {
      return this.movePiece(piece, target);
    } catch (err) {
      if (err instanceof ChessError) {
        return this;
      }
      throw err;
    }
  },
  movePiece: function(piece, target) {
    if (target == null || piece == null) {
      throw new Error("Argument error");
    }
    var $__18 = $traceurRuntime.assertObject(EnPassantTarget.capturablePiece(this, piece, target)),
        capturePiece = $__18.capturePiece,
        captureTarget = $__18.captureTarget,
        isEnPassant = $__18.isEnPassant;
    if (!Mobility.isLegal({
      position: this,
      piece: piece,
      target: target,
      capturePiece: capturePiece
    })) {
      throw new MobilityError();
    }
    var castling = Castling.analyze(this, piece, target);
    var position = this.beget({
      activeColor: oppositeColor(this.activeColor),
      castling: castling,
      enPassantTarget: EnPassantTarget.analyze(this, piece, target),
      halfmoveClock: HalfmoveClock.analyze(this, piece, target),
      fullmoveCounter: (this.activeColor === BLACK ? this.fullmoveCounter + 1 : this.fullmoveCounter),
      board: this.board.map((function(p, square) {
        if ((p === piece) || (isEnPassant && square.equal(captureTarget)) || (p && p === castling.rook)) {
          return null;
        }
        if (castling.square && square.equal(castling.square)) {
          return castling.rook;
        }
        if (square.equal(target)) {
          return piece;
        }
        return p;
      }))
    });
    if (position.isCheck(this.activeColor)) {
      throw new CheckError();
    }
    return position;
  },
  promote: function(prize) {
    var $__11 = this;
    if (this.promotionSquare == null) {
      throw new PromotionError();
    }
    return this.beget({
      board: this.board.map((function(p, square) {
        return square.equal($__11.promotionSquare) ? prize : p;
      })),
      promotionSquare: null
    });
  },
  move: function(notation) {
    var $__18 = $traceurRuntime.assertObject(Algebraic.parse(notation, this)),
        piece = $__18.piece,
        target = $__18.target,
        promotionPrize = $__18.promotionPrize;
    var position = this.movePiece(piece, target);
    if (promotionPrize != null) {
      return position.promote(promotionPrize);
    }
    return position;
  }
}, {});
