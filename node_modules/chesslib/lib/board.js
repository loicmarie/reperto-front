"use strict";
Object.defineProperties(exports, {
  Board: {get: function() {
      return Board;
    }},
  __esModule: {value: true}
});
var $__0 = require('./brands'),
    KING = $__0.KING,
    QUEEN = $__0.QUEEN,
    KNIGHT = $__0.KNIGHT,
    BISHOP = $__0.BISHOP,
    ROOK = $__0.ROOK,
    PAWN = $__0.PAWN;
var Point = require('./point').Point;
var Board = function Board() {
  var files = arguments[0] !== (void 0) ? arguments[0] : 8;
  var ranks = arguments[1] !== (void 0) ? arguments[1] : 8;
  var boardArr = arguments[2];
  this.files = files;
  this.ranks = ranks;
  this.storage = createStorage(files, ranks);
  this.pieces = new Set();
  $traceurRuntime.setProperty(this.pieces, KING, new Set());
  $traceurRuntime.setProperty(this.pieces, QUEEN, new Set());
  $traceurRuntime.setProperty(this.pieces, KNIGHT, new Set());
  $traceurRuntime.setProperty(this.pieces, BISHOP, new Set());
  $traceurRuntime.setProperty(this.pieces, ROOK, new Set());
  $traceurRuntime.setProperty(this.pieces, PAWN, new Set());
  if (boardArr != null) {
    this.decorate(boardArr);
  }
};
var $Board = Board;
($traceurRuntime.createClass)(Board, {
  map: function(fn) {
    return new $Board(this.ranks, this.files, this.storage.map((function(rank, i) {
      return rank.map((function(piece, j) {
        return fn(piece, new Point(j, i));
      }));
    })));
  },
  getPieces: function(brand) {
    return brand == null ? this.pieces : this.pieces[$traceurRuntime.toProperty(brand)];
  },
  getPieceCoords: function(piece) {
    for (var i = 0,
        iLen = this.storage.length; i < iLen; i++) {
      try {
        throw undefined;
      } catch (rank) {
        {
          rank = this.storage[$traceurRuntime.toProperty(i)];
          for (var j = 0,
              jLen = rank.length; j < jLen; j++) {
            try {
              throw undefined;
            } catch (p) {
              {
                p = rank[$traceurRuntime.toProperty(j)];
                if (p && p === piece) {
                  return new Point(j, i);
                }
              }
            }
          }
        }
      }
    }
    return null;
  },
  getPieceByCoords: function($__4) {
    var $__5 = $traceurRuntime.assertObject($__4),
        x = $__5.x,
        y = $__5.y;
    var rotated = arguments[1] !== (void 0) ? arguments[1] : false;
    var rank = this.storage[$traceurRuntime.toProperty(rotated ? this.ranks - y - 1 : y)];
    return rank == null ? null : rank[$traceurRuntime.toProperty(rotated ? this.files - x - 1 : x)];
  },
  placePiece: function(piece, $__4) {
    var $__5 = $traceurRuntime.assertObject($__4),
        file = $__5.x,
        rank = $__5.y;
    $traceurRuntime.setProperty(this.storage[$traceurRuntime.toProperty(rank)], file, piece);
    this.pieces.add(piece);
    this.pieces[$traceurRuntime.toProperty(piece.brand)].add(piece);
  },
  decorate: function(board) {
    var $__2 = this;
    board.forEach((function(rank, i) {
      rank.forEach((function(file, j) {
        var piece = board[$traceurRuntime.toProperty(i)][$traceurRuntime.toProperty(j)];
        if (piece != null) {
          $__2.placePiece(piece, new Point(j, i));
        }
      }));
    }));
  }
}, {});
function createStorage() {
  var ranks = arguments[0] !== (void 0) ? arguments[0] : 8;
  var files = arguments[1] !== (void 0) ? arguments[1] : 8;
  var board = [];
  for (var i = 0; i < ranks; i++) {
    try {
      throw undefined;
    } catch (rank) {
      {
        rank = [];
        for (var j = 0; j < files; j++) {
          rank.push(null);
        }
        board.push(rank);
      }
    }
  }
  return board;
}
