"use strict";
var $__6 = $traceurRuntime.initGeneratorFunction(entries),
    $__11 = $traceurRuntime.initGeneratorFunction(bounded);
Object.defineProperties(exports, {
  entries: {get: function() {
      return entries;
    }},
  bounded: {get: function() {
      return bounded;
    }},
  identity: {get: function() {
      return identity;
    }},
  squareName: {get: function() {
      return squareName;
    }},
  fileName: {get: function() {
      return fileName;
    }},
  rankName: {get: function() {
      return rankName;
    }},
  fileIndex: {get: function() {
      return fileIndex;
    }},
  rankIndex: {get: function() {
      return rankIndex;
    }},
  squareCoords: {get: function() {
      return squareCoords;
    }},
  squareCoordsByName: {get: function() {
      return squareCoordsByName;
    }},
  oppositeColor: {get: function() {
      return oppositeColor;
    }},
  squareColor: {get: function() {
      return squareColor;
    }},
  isEven: {get: function() {
      return isEven;
    }},
  isOdd: {get: function() {
      return isOdd;
    }},
  partition: {get: function() {
      return partition;
    }},
  last: {get: function() {
      return last;
    }},
  __esModule: {value: true}
});
var $__0 = require('./brands'),
    WHITE = $__0.WHITE,
    BLACK = $__0.BLACK,
    LIGHT = $__0.LIGHT,
    DARK = $__0.DARK;
var Point = require('./point').Point;
var isNumber = require('lodash.isnumber');
function entries(collection) {
  var $__7,
      $__8,
      $__9,
      $__10,
      k;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          $__7 = [];
          $__8 = collection;
          for ($__9 in $__8)
            $__7.push($__9);
          $ctx.state = 14;
          break;
        case 14:
          $__10 = 0;
          $ctx.state = 12;
          break;
        case 12:
          $ctx.state = ($__10 < $__7.length) ? 8 : -2;
          break;
        case 4:
          $__10++;
          $ctx.state = 12;
          break;
        case 8:
          k = $__7[$traceurRuntime.toProperty($__10)];
          $ctx.state = 9;
          break;
        case 9:
          $ctx.state = (!($traceurRuntime.toProperty(k) in $__8)) ? 4 : 6;
          break;
        case 6:
          $ctx.state = 2;
          return [collection[$traceurRuntime.toProperty(k)], k];
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        default:
          return $ctx.end();
      }
  }, $__6, this);
}
function bounded($__4, iterator) {
  var $__5,
      files,
      ranks,
      $__2,
      $__3,
      pt;
  return $traceurRuntime.createGeneratorInstance(function($ctx) {
    while (true)
      switch ($ctx.state) {
        case 0:
          $__5 = $traceurRuntime.assertObject($__4), files = $__5.files, ranks = $__5.ranks;
          $ctx.state = 11;
          break;
        case 11:
          $__2 = iterator[$traceurRuntime.toProperty(Symbol.iterator)]();
          $ctx.state = 4;
          break;
        case 4:
          $ctx.state = (!($__3 = $__2.next()).done) ? 6 : -2;
          break;
        case 6:
          pt = $__3.value;
          $ctx.state = 7;
          break;
        case 7:
          $ctx.state = (new Point(0, 0).lte(pt) && new Point(files, ranks).gt(pt)) ? 1 : 4;
          break;
        case 1:
          $ctx.state = 2;
          return pt;
        case 2:
          $ctx.maybeThrow();
          $ctx.state = 4;
          break;
        default:
          return $ctx.end();
      }
  }, $__11, this);
}
var identity = (function(it) {
  return it;
});
var squareName = (function($__4) {
  var $__5 = $traceurRuntime.assertObject($__4),
      file = $__5.x,
      rank = $__5.y;
  return ("" + fileName(file) + rankName(rank));
});
var fileName = (function(file) {
  return 'abcdefgh'.charAt(file);
});
var rankName = (function(rank) {
  var top = arguments[1] !== (void 0) ? arguments[1] : 8;
  return String(top - rank);
});
var fileIndex = (function(fileName) {
  return 'abcdefgh'.indexOf(fileName);
});
var rankIndex = (function(rankName) {
  var top = arguments[1] !== (void 0) ? arguments[1] : 8;
  return top - Number(rankName);
});
var squareCoords = (function(squareName) {
  var $__4 = $traceurRuntime.assertObject(squareName.split('')),
      fileName = $__4[0],
      rankName = $__4[1];
  return squareCoordsByName(fileName, rankName);
});
var squareCoordsByName = (function(fileName, rankName) {
  return new Point(fileIndex(fileName), rankIndex(rankName));
});
var oppositeColor = (function(color) {
  return color === WHITE ? BLACK : WHITE;
});
var squareColor = (function($__4) {
  var $__5 = $traceurRuntime.assertObject($__4),
      x = $__5.x,
      y = $__5.y;
  return (isEven(x) && isEven(y) || isOdd(x) && isOdd(y)) ? LIGHT : DARK;
});
var isEven = (function(n) {
  return isNumber(n) && n % 2 === 0;
});
var isOdd = (function(n) {
  return !isEven(n);
});
var partition = (function(list, fn) {
  var result = [[], []];
  for (var $__2 = list[$traceurRuntime.toProperty(Symbol.iterator)](),
      $__3; !($__3 = $__2.next()).done; ) {
    var item = $__3.value;
    {
      result[$traceurRuntime.toProperty(+!fn(item))].push(item);
    }
  }
  return result;
});
var last = (function(arr) {
  return arr[$traceurRuntime.toProperty(arr.length - 1)];
});
