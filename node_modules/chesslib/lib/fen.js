"use strict";
Object.defineProperties(exports, {
  FEN: {get: function() {
      return FEN;
    }},
  standard: {get: function() {
      return standard;
    }},
  standardPosition: {get: function() {
      return standardPosition;
    }},
  __esModule: {value: true}
});
var $__0 = require('./brands'),
    WHITE = $__0.WHITE,
    BLACK = $__0.BLACK;
var $__1 = require('./standard'),
    Pawn = $__1.Pawn,
    Rook = $__1.Rook,
    Knight = $__1.Knight,
    Bishop = $__1.Bishop,
    King = $__1.King,
    Queen = $__1.Queen;
var Castling = require('./castling').Castling;
var $__3 = require('./eptarget'),
    EnPassantTarget = $__3.EnPassantTarget,
    NullEnPassantTarget = $__3.NullEnPassantTarget;
var Position = require('./position').Position;
var Board = require('./board').Board;
var Point = require('./point').Point;
var HalfmoveClock = require('./halfmoveclock').HalfmoveClock;
var squareCoords = require('./util').squareCoords;
var FEN = {
  parse: function(fenStr) {
    var $__9 = $traceurRuntime.assertObject(fenStr.split(' ')),
        ranks = $__9[0],
        activeColor = $__9[1],
        castling = $__9[2],
        enPassantTarget = $__9[3],
        halfmoveClock = $__9[4],
        fullmoveCounter = $__9[5];
    return new Position({
      board: parseRanks(ranks),
      activeColor: parseActiveColor(activeColor),
      castling: parseCastling(castling),
      enPassantTarget: parseEPTarget(enPassantTarget),
      halfmoveClock: parseClock(halfmoveClock),
      fullmoveCounter: parseCounter(fullmoveCounter)
    });
  },
  stringify: function(position) {
    return stringifyPosition(position);
  },
  get standard() {
    return standard;
  },
  get standardPosition() {
    return standardPosition;
  }
};
var standard = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1';
var standardPosition = FEN.parse(standard);
function parseRanks(ranks) {
  var board = new Board();
  ranks.split('/').forEach((function(rank, i) {
    parseRank(rank, board, i);
  }));
  return board;
}
function parseRank(rank, board, i) {
  var cells = rank.split('');
  for (var j = 0,
      c = 0; j < board.files; c++) {
    var cell = rank[$traceurRuntime.toProperty(c)];
    if (!isNaN(Number(cell))) {
      j += Number(cell);
      continue;
    }
    board.placePiece(createPiece(cell), new Point(j, i));
    j += 1;
  }
}
function createPiece(piece) {
  var lowered = piece.toLowerCase();
  var options = {color: lowered === piece ? BLACK : WHITE};
  switch (lowered) {
    case 'p':
      return new Pawn(options);
    case 'r':
      return new Rook(options);
    case 'n':
      return new Knight(options);
    case 'b':
      return new Bishop(options);
    case 'k':
      return new King(options);
    case 'q':
      return new Queen(options);
  }
}
function parseActiveColor(activeColor) {
  switch (activeColor) {
    case 'w':
      return WHITE;
    case 'b':
      return BLACK;
  }
}
function parseCastling(castling) {
  return new Castling({fenEncoding: castling});
}
function parseEPTarget(enPassantTarget) {
  switch (enPassantTarget) {
    case '-':
      return EnPassantTarget.null();
    default:
      return EnPassantTarget.fromPoint(squareCoords(enPassantTarget));
  }
}
function parseCounter(clock) {
  if (clock == null) {
    return null;
  }
  return Number(clock);
}
function stringifyPosition(position) {
  return [stringifyRanks(position), stringifyActiveColor(position.activeColor), stringifyCastling(position.castling), stringifyEPTarget(position.enPassantTarget), stringifyClock(position.halfmoveClock), stringifyCounter(position.fullmoveCounter)].filter(Boolean).join(' ');
}
function stringifyRanks(position) {
  var ranks = '';
  for (var i = 0; i < 8; i++) {
    for (var j = 0,
        count = 0; j < 8; j++) {
      var piece = position.pieceByCoords(new Point(j, i));
      if (piece == null) {
        count += 1;
        if (j === 7) {
          ranks += ("" + (count ? count : '') + (i !== 7 ? '/' : ''));
        }
        continue;
      }
      ranks += ("" + (count ? count : '') + piece.fenEncoding);
      if (j === 7 && i !== 7) {
        ranks += '/';
      }
      count = 0;
    }
  }
  return ranks;
}
function stringifyActiveColor(activeColor) {
  switch (activeColor) {
    case WHITE:
      return 'w';
    case BLACK:
      return 'b';
  }
}
function stringifyCastling(castling) {
  return String(castling);
}
function stringifyEPTarget(enPassantTarget) {
  if (enPassantTarget == null || enPassantTarget instanceof NullEnPassantTarget) {
    return '-';
  }
  return String(enPassantTarget);
}
function stringifyClock(clock) {
  if (String(clock) === '0') {
    return clock.source;
  }
  return String(clock);
}
function stringifyCounter(counter) {
  if (counter == null) {
    return null;
  }
  return String(counter);
}
function parseClock(halfmoveClock) {
  return new HalfmoveClock(halfmoveClock != null ? Number(halfmoveClock) : 0, halfmoveClock);
}
