"use strict";
Object.defineProperties(exports, {
  Point: {get: function() {
      return Point;
    }},
  __esModule: {value: true}
});
var Point = function Point(x, y) {
  this.x = x;
  this.y = y;
};
var $Point = Point;
($traceurRuntime.createClass)(Point, {
  equal: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return this.x === x && this.y === y;
  },
  sum: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return new $Point(this.x + x, this.y + y);
  },
  difference: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return new $Point(this.x - x, this.y - y);
  },
  product: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return new $Point(this.x * x, this.y * y);
  },
  lt: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return this.x < x && this.y < y;
  },
  lte: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return this.x <= x && this.y <= y;
  },
  gt: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return this.x > x && this.y > y;
  },
  gte: function($__1) {
    var $__2 = $traceurRuntime.assertObject($__1),
        x = $__2.x,
        y = $__2.y;
    return this.x >= x && this.y >= y;
  },
  to: $traceurRuntime.initGeneratorFunction(function $__4(to) {
    var $__1,
        $__2,
        x0,
        x1,
        $__3,
        y0,
        y1,
        i,
        j;
    return $traceurRuntime.createGeneratorInstance(function($ctx) {
      while (true)
        switch ($ctx.state) {
          case 0:
            $__1 = [[Math.min(this.x, to.x), Math.max(this.x, to.x)], [Math.min(this.y, to.y), Math.max(this.y, to.y)]], $__2 = $traceurRuntime.assertObject($__1[0]), x0 = $__2[0], x1 = $__2[1], $__3 = $traceurRuntime.assertObject($__1[1]), y0 = $__3[0], y1 = $__3[1];
            $ctx.state = 12;
            break;
          case 12:
            i = y0;
            $ctx.state = 10;
            break;
          case 10:
            $ctx.state = (i < y1) ? 6 : -2;
            break;
          case 5:
            i++;
            $ctx.state = 10;
            break;
          case 6:
            j = x0;
            $ctx.state = 7;
            break;
          case 7:
            $ctx.state = (j < x1) ? 1 : 5;
            break;
          case 4:
            j++;
            $ctx.state = 7;
            break;
          case 1:
            $ctx.state = 2;
            return new $Point(j, i);
          case 2:
            $ctx.maybeThrow();
            $ctx.state = 4;
            break;
          default:
            return $ctx.end();
        }
    }, $__4, this);
  })
}, {});
